const { Telegraf, Markup } = require('telegraf');
const mongoose = require('mongoose');
const { v4: uuidv4 } = require('uuid');
const dotenv = require('dotenv');
const COOLDOWN_MINUTES = 5;
const fiveMinutesAgo = new Date(Date.now() - COOLDOWN_MINUTES * 60 * 1000);

dotenv.config();
const bot = new Telegraf(process.env.BOT_TOKEN);

console.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω!'))
  .catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB:', err.message);
    process.exit(1);
  });

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userSchema = new mongoose.Schema({
  userId: { type: String, unique: true, required: true },
  username: String,
  isAdmin: { type: Boolean, default: false }
});
const User = mongoose.model('User', userSchema);

// –°—Ö–µ–º–∞ pending –æ–ø–ª–∞—Ç
const pendingPaymentSchema = new mongoose.Schema({
  userId: String,
  username: String,
  courseKey: String,
  photoFileId: String,
  status: { type: String, default: 'pending' }, // pending, approved, rejected
  createdAt: { type: Date, default: Date.now },
  lastRequestAt: { type: Date, default: Date.now } // ‚Üê –ù–û–í–û–ï –ü–û–õ–ï
});
const PendingPayment = mongoose.model('PendingPayment', pendingPaymentSchema);

// –°—Ö–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (—Å expiresAt 30 –¥–Ω–µ–π)
const promoSchema = new mongoose.Schema({
  code: { type: String, unique: true, required: true },
  userId: { type: String, required: true },
  username: String,
  course: { type: String, required: true },
  deviceFingerprint: String,
  used: { type: Boolean, default: false },
  createdAt: { type: Date, default: Date.now },
  expiresAt: { type: Date, default: () => new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) }  // 30 –¥–Ω–µ–π
});
const Promo = mongoose.model('Promo', promoSchema);

// –ö—É—Ä—Å—ã —Å —Ü–µ–Ω–∞–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
const COURSES = {
  course_russian: {
    name: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠: –†—É—Å—Å–∫–∏–π —è–∑—ã–∫',
    price: 499,
    description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∫—É—Ä—Å –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –¥–ª—è –ï–ì–≠: –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏, —Ç–µ—Å—Ç—ã, —Ä–∞–∑–±–æ—Ä –∑–∞–¥–∞–Ω–∏–π, –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å–æ—á–∏–Ω–µ–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –±–∞–ª–ª–æ–≤.'
  },
  course_history: {
    name: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠: –ò—Å—Ç–æ—Ä–∏—è',
    price: 499,
    description: '–ü–æ–ª–Ω—ã–π –∫—É—Ä—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ï–ì–≠: —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è —Å–æ–±—ã—Ç–∏–π, –∫–ª—é—á–µ–≤—ã–µ –¥–∞—Ç—ã, –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –∫–∞—Ä—Ç—ã –∏ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π.'
  },
  course_social: {
    name: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ï–ì–≠: –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ',
    price: 499,
    description: '–ö—É—Ä—Å –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—è –¥–ª—è –ï–ì–≠: —Ç–µ–º—ã –ø—Ä–∞–≤–∞, —ç–∫–æ–Ω–æ–º–∏–∫–∏, –ø–æ–ª–∏—Ç–∏–∫–∏, —Å–æ—Ü–∏–æ–ª–æ–≥–∏–∏. –° –ø—Ä–∏–º–µ—Ä–∞–º–∏, —Ç–µ—Å—Ç–∞–º–∏ –∏ —ç—Å—Å–µ. –ü–æ–º–æ–≥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è.'
  },
  course_math: {
    name: '–ï–ì–≠: –ë–∞–∑–æ–≤–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
    price: 499,
    description: '–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è –ï–ì–≠: –∞–ª–≥–µ–±—Ä–∞, –≥–µ–æ–º–µ—Ç—Ä–∏—è, –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏. –í–∏–¥–µ–æ—Ä–∞–∑–±–æ—Ä—ã,Á∑¥Áøí —Ç–µ—Å—Ç—ã –∏ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–µ—à–µ–Ω–∏—é.'
  },
  course_soft: {
    name: '–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫ –æ—Ç –£–º—Å–∫—É–ª',
    price: 199,
    description: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫ —Ä–∞–∑–≤–∏—Ç–∏—è: –º–æ—Ç–∏–≤–∞—Ü–∏—è, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, soft skills –¥–ª—è —É—á–µ–±—ã –∏ —ç–∫–∑–∞–º–µ–Ω–æ–≤. –ö–æ—Ä–æ—Ç–∫–∏–µ —É—Ä–æ–∫–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è.'
  },
  course_full: {
    name: '–ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –ï–ì–≠',
    price: 1499,
    description: '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º –ï–ì–≠: —Ä—É—Å—Å–∫–∏–π, –∏—Å—Ç–æ—Ä–∏—è, –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ + –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫. –≠–∫–æ–Ω–æ–º–∏—è –∏ –ø–æ–ª–Ω—ã–π –æ—Ö–≤–∞—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.'
  }
};

// –†–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–ª–∞—Ç—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
const PAYMENT_INFO = '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {price} —Ä—É–± –Ω–∞ –∫–∞—Ä—Ç—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ: +79063316937 (–ù–∏–≥–º–∞—Ç–¥–∏–Ω–æ–≤ –ò.). –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à @username –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const states = new Map();
let adminId = null;

// –°–∞–π—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL)
const ACTIVATION_SITE = 'https://umskul.ru/activate'; // Placeholder; –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(ctx) {
  const userId = ctx.from.id.toString();
  const username = ctx.from.username;
  let user = await User.findOne({ userId });
  if (!user) {
    user = new User({ userId, username, isAdmin: username === 'insafbober' });
    await user.save();
  } else if (username === 'insafbober' && !user.isAdmin) {
    user.isAdmin = true;
    await user.save();
  }
  if (user.isAdmin) adminId = userId;
}

// /start
bot.start(async (ctx) => {
  await registerUser(ctx);
  states.delete(ctx.from.id.toString()); // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const name = ctx.from.first_name || '–¥—Ä—É–≥';
  const keyboard = [
    [Markup.button.callback('üìò –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - 499 —Ä—É–±', 'course_russian')],
    [Markup.button.callback('üìú –ò—Å—Ç–æ—Ä–∏—è - 499 —Ä—É–±', 'course_history')],
    [Markup.button.callback('‚öñÔ∏è –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ - 499 —Ä—É–±', 'course_social')],
    [Markup.button.callback('üìê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - 499 —Ä—É–±', 'course_math')],
    [Markup.button.callback('üß† –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫ - 199 —Ä—É–±', 'course_soft')],
    [Markup.button.callback('üéØ –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç - 1499 —Ä—É–±', 'course_full')],
    [Markup.button.callback('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')]
  ];
  if (adminId === ctx.from.id.toString()) {
    keyboard.push([Markup.button.callback('üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]);
  }
  ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç, ${name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–°–ª–∏–≤—ã –£–º—Å–∫—É–ª* üéì\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å–∞–º –Ω–∞ 30 –¥–Ω–µ–π.\n–¶–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö –∑–∞ –º–µ—Å—è—Ü.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏ –ø–æ–∫—É–ø–∫–∏:`,
    Markup.inlineKeyboard(keyboard)
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
bot.action(Object.keys(COURSES), async (ctx) => {
  await registerUser(ctx);
  const courseKey = ctx.callbackQuery.data;
  const course = COURSES[courseKey];
  const userId = ctx.from.id.toString();
  const username = ctx.from.username || '–ë–µ–∑ username';

  await ctx.answerCbQuery();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
  const existingPromo = await Promo.findOne({ 
    userId, 
    course: course.name, 
    used: false, 
    expiresAt: { $gt: new Date() } 
  });
  if (existingPromo) {
    return ctx.reply(`‚ö†Ô∏è –ö—É—Ä—Å *${course.name}* —É–∂–µ –∫—É–ø–ª–µ–Ω!\n–ü—Ä–æ–º–æ–∫–æ–¥: **${existingPromo.code}** (–¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${existingPromo.expiresAt.toLocaleDateString('ru-RU')})\n–ê–∫—Ç–∏–≤–∏—Ä—É–π –Ω–∞ —Å–∞–π—Ç–µ: ${ACTIVATION_SITE}.`, { parse_mode: 'Markdown' });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º pending –∑–∞—è–≤–∫—É
// ==== –ü—Ä–æ–≤–µ—Ä–∫–∞ pending –∑–∞—è–≤–∫–∏ ====
const lastRequest = await PendingPayment.findOne({
  userId,
  lastRequestAt: { $gt: fiveMinutesAgo }
}).sort({ lastRequestAt: -1 });

if (lastRequest) {
  const minutesLeft = Math.ceil((COOLDOWN_MINUTES * 60 * 1000 - (Date.now() - lastRequest.lastRequestAt)) / 60000);
  return ctx.reply(`‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${minutesLeft} –º–∏–Ω. –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–æ–π.`);
}

// ==== –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É ====
const pending = new PendingPayment({ 
  userId, 
  username, 
  courseKey,
  lastRequestAt: new Date()  // ‚Üê –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
});
await pending.save();

  // –ò–Ω—Ñ–æ –æ–± –æ–ø–ª–∞—Ç–µ
  const paymentDetails = PAYMENT_INFO.replace('{price}', course.price);

  ctx.replyWithMarkdown(
    `üìö *–ö—É—Ä—Å: ${course.name}*\n\n` +
    `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${course.description}\n\n` +
    `üí∞ *–¶–µ–Ω–∞:* ${course.price} —Ä—É–± (–∑–∞ 30 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞)\n\n` +
    `${paymentDetails}\n\n` +
    `–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ (—Ñ–æ—Ç–æ) –≤ —ç—Ç–æ—Ç —á–∞—Ç. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∏ –≤—ã–¥–∞–¥–∏–º –ø—Ä–æ–º–æ–∫–æ–¥.`
  );

  states.set(userId, `waiting_photo_${pending._id}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (—Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞)
bot.on('photo', async (ctx) => {
  const userId = ctx.from.id.toString();
  const state = states.get(userId);
  if (state && state.startsWith('waiting_photo_')) {
    const pendingId = state.split('_')[2];
    const pending = await PendingPayment.findById(pendingId);
    if (pending && pending.userId === userId && pending.status === 'pending' && !pending.photoFileId) {
      pending.photoFileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
      await pending.save();
      ctx.reply('‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      if (adminId) {
        const course = COURSES[pending.courseKey];
        bot.telegram.sendPhoto(adminId, pending.photoFileId, {
          caption: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:\n–ö—É—Ä—Å: ${course.name}\n–û—Ç: @${pending.username} (ID: ${pending.userId})`,
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', `approve_${pending._id}`), Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_${pending._id}`)]
          ]).reply_markup
        });
      }
      states.delete(userId);
    } else {
      ctx.reply('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.');
    }
  } else {
    ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏.');
  }
});

// ==== –û–¥–æ–±—Ä–µ–Ω–∏–µ ====
bot.action(/approve_(.+)/, async (ctx) => {
  if (ctx.from.id.toString() !== adminId) return ctx.answerCbQuery('–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.');
  const pendingId = ctx.match[1];
  const pending = await PendingPayment.findById(pendingId);
  if (!pending || pending.status !== 'pending') {
    return ctx.answerCbQuery('–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
  }

  pending.status = 'approved';
  await pending.save();

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
  const course = COURSES[pending.courseKey];
  const code = uuidv4();
  const promo = new Promo({ code, userId: pending.userId, username: pending.username, course: course.name });
  await promo.save();

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await bot.telegram.sendMessage(pending.userId, 
    `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n–ö—É—Ä—Å: *${course.name}*\n–ü—Ä–æ–º–æ–∫–æ–¥: **${code}**\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${promo.expiresAt.toLocaleDateString('ru-RU')}\n–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ: ${ACTIVATION_SITE}.`,
    { parse_mode: 'Markdown' }
  );

  // ‚Üê –£–î–ê–õ–Ø–ï–ú –∑–∞–ø–∏—Å—å
  await PendingPayment.deleteOne({ _id: pending._id });

  await ctx.answerCbQuery('–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.');
  await ctx.editMessageCaption(`–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞. –ü—Ä–æ–º–æ–∫–æ–¥ –≤—ã–¥–∞–Ω.`);
});

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
// ==== –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ====
bot.action(/reject_(.+)/, async (ctx) => {
  if (ctx.from.id.toString() !== adminId) return ctx.answerCbQuery('–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.');
  const pendingId = ctx.match[1];
  const pending = await PendingPayment.findById(pendingId);
  if (!pending || pending.status !== 'pending') {
    return ctx.answerCbQuery('–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
  }

  pending.status = 'rejected';
  await pending.save();

  await bot.telegram.sendMessage(pending.userId, '‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');

  // ‚Üê –£–î–ê–õ–Ø–ï–ú –∑–∞–ø–∏—Å—å
  await PendingPayment.deleteOne({ _id: pending._id });

  await ctx.answerCbQuery('–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.');
  await ctx.editMessageCaption(`–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
});

// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
bot.action('admin_panel', async (ctx) => {
  if (ctx.from.id.toString() !== adminId) return ctx.answerCbQuery('–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.');
  await ctx.answerCbQuery();
  ctx.reply('üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:', Markup.inlineKeyboard([
    [Markup.button.callback('üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º', 'broadcast_start')]
  ]));
});

// –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
bot.action('broadcast_start', async (ctx) => {
  if (ctx.from.id.toString() !== adminId) return ctx.answerCbQuery('–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É.');
  await ctx.answerCbQuery();
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞):');
  states.set(adminId, 'waiting_broadcast');
});

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞
bot.action('support', async (ctx) => {
  await ctx.answerCbQuery();
  ctx.reply('üìû –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ /start.', 
    Markup.inlineKeyboard([[Markup.button.callback('‚ùå –í—ã–π—Ç–∏', 'exit_support')]])
  );
  states.set(ctx.from.id.toString(), 'support_mode');
});

bot.action('exit_support', async (ctx) => {
  states.delete(ctx.from.id.toString());
  await ctx.answerCbQuery('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.');
  ctx.reply('–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –º–µ–Ω—é.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏)
bot.on('text', async (ctx) => {
  const userId = ctx.from.id.toString();
  const state = states.get(userId);
  if (state === 'waiting_broadcast' && userId === adminId) {
    const text = ctx.message.text;
    const users = await User.find({ isAdmin: false });
    let count = 0;
    for (const user of users) {
      try {
        await bot.telegram.sendMessage(user.userId, text);
        count++;
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.userId}:`, err);
      }
    }
    ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`);
    states.delete(userId);
  } else if (state === 'support_mode') {
    const text = ctx.message.text;
    if (adminId) {
      await bot.telegram.sendMessage(adminId, `üì© –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç @${ctx.from.username || '–∞–Ω–æ–Ω–∏–º'} (ID: ${userId}):\n\n${text}`);
    }
    ctx.reply('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–ª–∏ –≤—ã–π–¥–∏—Ç–µ.', 
      Markup.inlineKeyboard([[Markup.button.callback('‚ùå –í—ã–π—Ç–∏', 'exit_support')]])
    );
  } else {
    // –ò–≥–Ω–æ—Ä –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞
    ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –º–µ–Ω—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.');
  }
});

// –ù–∞–∑–∞–¥ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ —É–±—Ä–∞–ª–∏ reset)
bot.action('back_to_start', (ctx) => ctx.reply('/start'));

// –û—à–∏–±–∫–∏
bot.catch((err, ctx) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π /start.');
});

// –ó–∞–ø—É—Å–∫
bot.launch().then(() => console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')).catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err));

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));